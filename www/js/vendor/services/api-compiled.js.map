{"version":3,"sources":["api.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE;AACrH,QAAI,OAAO;QAAE,IAAI;QAAE,MAAM;QAAE,QAAQ;QAAE,UAAS;QAAE,cAAc,GAAG,IAAI,CAAC;;;;;;;;AAQtE,QAAI,GAAG;AACH,gBAAQ,EAAE,+BAA+B;AACzC,iBAAS,EAAE,EAAE;AACb,YAAI,EAAE,KAAK;AACX,aAAK,EAAE,IAAI;AACX,yBAAiB,EAAE,EAAE;KACxB,CAAC;;;AAGF,UAAM,GAAG;;;AAGL,wBAAgB,EAAE,4BAAY;AAC1B,mBAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,0DAA0D,CAAC,GAAG,CAAC,CAAC;SAClG;;;;;;AAMD,sBAAc,EAAE,wBAAU,OAAO,EAAE;AAC/B,mBAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;SACxE;;AAED,mBAAW,EAAE,uBAAY;AACrB,mBAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;SAC7D;;AAED,kBAAU,EAAE,sBAAY;AACpB,mBAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,uCAAuC,CAAC,GAAG,CAAC,CAAC;SAC/E;KACJ,CAAC;;;AAGF,WAAO,GAAG;AACN,WAAG,EAAE;;;;;AAKD,qBAAS,EAAE,mBAAU,GAAG,EAAE;AACtB,oBAAI,CAAC,SAAS,GAAG,GAAG,CAAC;aACxB;;;;;;AAMD,oBAAQ,EAAE,kBAAU,SAAQ,EAAE;AAC1B,oBAAI,CAAC,QAAQ,GAAG,SAAQ,CAAC;aAC5B;;;;;;AAMD,iBAAK,EAAE,eAAU,IAAI,EAAE;AACnB,oBAAI,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;aACvB;;;;;;AAMD,gBAAI,EAAE,cAAU,IAAI,EAAE;AAClB,oBAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;aACtB;SACJ;;AAED,WAAG,EAAE;;;;;AAKD,uBAAW,EAAE,qBAAU,MAAM,EAAE;AAC3B,uBAAO,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;aAC7G;;AAED,qBAAS,EAAE,qBAAY;AACnB,uBAAO,UAAS,CAAC;aACpB;;;;;;;AAOD,sBAAU,EAAE,sBAAY;AACpB,uBAAO,IAAI,CAAC,KAAK,CAAC;aACrB;;AAED,qBAAS,EAAE,mBAAU,IAAI,EAAE;AACvB,oBAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,GAAG,4BAA4B,CAAC;AACnE,qBAAK,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,2BAA2B,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC3F,wBAAI,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AAChC,wBAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,4CAA4C,CAAC,CAAC;AAC1E,2BAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;iBAC7C,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;AAClB,wBAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;iBAClC,CAAC,CAAC;aACN;;;;;;;;AAQD,yBAAa,EAAE,uBAAU,OAAO,EAAE,IAAI,EAAE;AACpC,uBAAO,QAAQ,CAAC,YAAY;AACxB,wBAAI,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;wBAClD,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;AACpD,wBAAI,cAAc,IAAI,gBAAgB,EAAE;AACpC,4BAAI,IAAI,CAAC,IAAI,EAAE;AACX,gCAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC;AAClC,mCAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;yBACzB,MAAM;AACH,iCAAK,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,2BAA2B,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;;AAE9F,oCAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;;;;;;;;AAQ9B,uCAAO,IAAI,CAAC,IAAI,CAAC,CAAC;6BACrB,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;AAClB,oCAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC/B,uCAAO,IAAI,CAAC,KAAK,CAAC,CAAC;6BACtB,CAAC,CAAC;yBACN;qBACJ,MAAM;AACH,+BAAO,cAAc,GAAG,MAAM,CAAC,gBAAgB,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;qBACtF;iBACJ,EAAE,CAAC,CAAC,CAAC;aACT;;;;;;;;;AASD,qCAAyB,EAAE,mCAAU,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC1D,uBAAO,QAAQ,CAAC,YAAY;AACxB,wBAAI,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;wBAClD,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;AACpD,wBAAI,cAAc,IAAI,gBAAgB,EAAE;AACpC,6BAAK,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,yBAAyB,GAAG,OAAO,GAAG,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AACtH,gCAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACjC,gCAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAC9B,mCAAO,IAAI,CAAC,IAAI,CAAC,CAAC;yBACrB,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;AAClB,gCAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC/B,mCAAO,IAAI,CAAC,KAAK,CAAC,CAAC;yBACtB,CAAC,CAAC;qBACN,MAAM,OAAO,cAAc,GAAG,MAAM,CAAC,gBAAgB,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;iBAE7F,EAAE,CAAC,CAAC,CAAC;aACT;;AAED,2BAAe,EAAE,yBAAU,UAAU,EAAE;AACnC,oBAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;AAC/B,oBAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;;AAE5B,oBAAI,WAAW,GAAG,EAAE,CAAC;;AAErB,oBAAI,MAAM,EAAE;;AAER,yBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;;;;;;;;;;;;;;;;;;;AAoBpC,4BAAI,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EACjB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;qBACnC;iBACJ;AACD,uBAAO,WAAW,CAAC;aACtB;;;;AAID,2BAAe,EAAE,2BAAY;AACzB,uBAAO;AACH,2BAAO,EAAE,IAAI;AACb,8BAAU,EAAE,IAAI;AAChB,yBAAK,EAAE,IAAI;AACX,6BAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO;AACrD,uCAAmB,EAAE,IAAI,CAAC,iBAAiB,CAAC,iBAAiB;AAC7D,sCAAkB,EAAE,IAAI,CAAC,iBAAiB,CAAC,gBAAgB;AAC3D,mCAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,aAAa;AACrD,4CAAwB,EAAE,CAAC;AAC3B,4CAAwB,EAAE,CAAC;AAC3B,kCAAc,EAAE,KAAK;AACrB,2BAAO,EAAE,EAAE;AACX,mCAAe,EAAE,EAAE;AACnB,uCAAmB,EAAE,GAAG;iBAC3B,CAAC;aACL;SACJ;;AAED,eAAO,EAAE;;;;AAIL,oBAAQ,EAAE,kBAAU,QAAQ,EAAE,aAAa,EAAE;AACzC,oBAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;AACzC,wBAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;AAC/C,8BAAU,CAAC,KAAK,GAAG;AACf,uCAAe,EAAE,QAAQ;AACzB,iCAAS,EAAE,aAAa;AACxB,8BAAM,EAAE,IAAI,IAAI,EAAE;qBACrB,CAAC;AACF,2BAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;iBACjD,MAAM;AACH,2BAAO,KAAK,CAAC;iBAChB;aACJ;;AAED,2BAAe,EAAE,yBAAU,cAAc,EAAE;AACvC,8BAAc,GAAG,IAAI,CAAC;AACtB,oBAAI,CAAC,cAAc,EAAE;AACjB,kCAAc,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC,cAAc,EAAE,cAAc,EAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AACvJ,+BAAO,IAAI,CAAC;qBACf,CAAC,CAAC;AACH,2BAAO,cAAc,CAAC;iBACzB;aACJ;;;AAGD,oBAAQ,EAAE,kBAAU,UAAU,EAAE,MAAM,EAAE;AACpC,oBAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;AAC/C,0BAAU,CAAC,aAAa,GAAG;AACvB,wBAAI,EAAE,UAAU;AAChB,iCAAa,EAAE,MAAM;iBACxB,CAAC;aACL;;AAED,sBAAU,EAAE,oBAAU,GAAG,EAAE;AACvB,uBAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,uBAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAC5B,8BAAc,GAAG,IAAI,CAAC;AACtB,oBAAI,CAAC,cAAc,EAAE;AACjB,kCAAc,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC5H,+BAAO,IAAI,CAAC;qBACf,CAAC,CAAC;AACH,2BAAO,cAAc,CAAC;iBACzB;aACJ;;AAED,oBAAQ,EAAE,kBAAU,OAAO,EAAE;AACzB,uBAAO,QAAQ,CAAC,YAAY;AACxB,2BAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AACpH,4BAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAC9B,+BAAO,IAAI,CAAC;qBACf,CAAC,CAAC;iBACN,EAAE,CAAC,CAAC,CAAC;aACT;;AAED,6BAAiB,EAAE,2BAAU,OAAO,EAAE;AAClC,uBAAO,QAAQ,CAAC,YAAY;AACxB,2BAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC7H,4BAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAC9B,+BAAO,IAAI,CAAC;qBACf,CAAC,CAAC;iBACN,EAAE,CAAC,CAAC,CAAC;aACT;SACJ;;;AAGD,gBAAQ,EAAE;;;AAGN,qBAAS,EAAE,qBAAY;;AAEnB,uBAAO,IAAI,CAAC;aACf;;;;AAID,mBAAO,EAAE,iBAAU,QAAO,EAAE;AACxB,uBAAO,CAAC,EAAE,AAAC,CAAC,QAAO,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,QAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAK,IAAI,MAAM,CAAC,kFAAkF,CAAC,CAAA,AAAC,CAAC;aAC1K;SACJ;KACJ,CAAC;;;AAGF,cAAS,GAAG;AACR,kBAAU,EAAE,EAAE;AACd,yBAAiB,EAAE,CAAC;AACpB,oBAAY,EAAE,CAAC;AACf,sBAAc,EAAE,IAAI;AACpB,2BAAmB,EAAE,IAAI;AACzB,0BAAkB,EAAE,IAAI;AACxB,uBAAe,EAAE,IAAI;AACrB,kBAAU,EAAE,EAAE;AACd,gBAAQ,EAAE,EAAE;KACf,CAAC;;AAEF,YAAQ,GAAG,UAAS,CAAC;;;AAGrB,WAAO,OAAO,CAAC;CAClB,CAAC,CAAC,CAAC","file":"api-compiled.js","sourcesContent":["'use strict';\n\nangular.module('APIServiceApp', []).factory('APIService', ['$http', '$log', '$timeout', function ($http, $log, $timeout) {\n    var methods, vars, errors, fakeData, emptyData, passagePromise = null;\n\n    /** Variables & flags\n     * @variable endpoint [type: string] : the API endpoint, without domain name and params\n     * @variable clientUrl [type: string] : the domain name of the partner we want to hit (e.g: http://pitapit.fr)\n     * @variable fake [type: boolean] : whether this service should mock API calls by serving fake JSON data for debugging\n     * @variable debug [type: boolean] : Turns logging ON/OFF\n     */\n    vars = {\n        endpoint: \"/api/RESTLoyalty/RESTLoyalty/\",\n        clientUrl: \"\",\n        fake: false,\n        debug: true,\n        currLoyaltyObject: {}\n    };\n\n    /** Shortcut functions for throwing the various possible errors */\n    errors = {\n        /** @function missingClientUrl\n         *  The error to throw in case 'vars.clientUrl' is not defined */\n        missingClientUrl: function () {\n            return vars.debug ? $log.error(\"Client URL is not set! Use APIService.set.clientUrl(xxx)\") : 0;\n        },\n\n        /** @function missingClientUrl\n         *  The error to throw in case the barcode param is not valid (= not 8 characters long and/or not a number)\n         *  @param barcode [type: number]\n         *  The barcode we want to get the data from */\n        invalidBarcode: function (barcode) {\n            return vars.debug ? $log.error(\"Barcode is not valid:\", barcode) : 0;\n        },\n\n        notLoggedIn: function () {\n            return vars.debug ? $log.error(\"No client logged in\") : 0;\n        },\n\n        addPassage: function () {\n            return vars.debug ? $log.error(\"AddPassage ERROR, API returned false.\") : 0;\n        }\n    };\n\n    /** Methods exposed by the service's API */\n    methods = {\n        set: {\n            /** @function methods.set.clientUrl(@param url)\n             *  Sets the client url. See 'vars.clientUrl' above\n             *  @params url [type: string]\n             *  the client's website url */\n            clientUrl: function (url) {\n                vars.clientUrl = url;\n            },\n\n            /** @function methods.set.endpoint(@param endpoint)\n             *  Sets the API endpoint. See 'vars.endpoint' above\n             *  @params endpoint [type: string]\n             *  the API's endpoint path without the url (= after the TLD) */\n            endpoint: function (endpoint) {\n                vars.endpoint = endpoint;\n            },\n\n            /** @function methods.set.debug\n             *  Allows to toggle debug mode (= logging in the console) on & off\n             *  @params bool [type: boolean]\n             *  Self-explanatory */\n            debug: function (bool) {\n                vars.debug = !!bool;\n            },\n\n            /** @function methods.set.fake\n             *  If set to true, we will use the fake data below for testing instead of actually calling the API\n             *  @params bool [type: boolean]\n             *  Self-explanatory */\n            fake: function (bool) {\n                vars.fake = !!bool;\n            }\n        },\n\n        get: {\n            /** @function methods.get.callableUrl\n             *  Returns the complete url to call an API method from the client url, the endpoint and the parameters\n             *  @param params [type: string]\n             *  The URL parameters to pass to the endpoint (e.g: '?barcode=12345678') */\n            callableUrl: function (params) {\n                return methods.validate.clientUrl() ? vars.clientUrl + vars.endpoint + params : errors.missingClientUrl();\n            },\n\n            emptyData: function () {\n                return emptyData;\n            },\n\n            /**\n             * @function methods.get.debugState\n             * Returns true if debugging is enabled\n             * @returns {boolean}\n             */\n            debugState: function () {\n                return vars.debug;\n            },\n\n            serverUrl: function (uuid) {\n                if (!vars.clientUrl) vars.clientUrl = 'http://ffpizza.izipass.pro';\n                $http.get(methods.get.callableUrl(\"GetServerUrl?Hardware_Id=\" + uuid)).success(function (data) {\n                    $log.info('getServerUrl', data);\n                    if (!data.Server_Url) alert(\"Cet appareil n'est pas relié à la fidélité\");\n                    methods.set.clientUrl(data['Server_Url']);\n                }).error(function (e) {\n                    vars.debug ? $log.error(e) : 0;\n                });\n            },\n\n            /** @function methods.get.loyaltyObject(@param barcode)\n             *  Get the data associated with a particular barcode\n             * @param barcode [type: number]\n             * The barcode we want to retrieve data from\n             * @param func [type: function]\n             * A callback function to which we pass the data */\n            loyaltyObject: function (barcode, func) {\n                return $timeout(function () {\n                    var isBarcodeValid = methods.validate.barcode(barcode),\n                        isClientUrlValid = methods.validate.clientUrl();\n                    if (isBarcodeValid && isClientUrlValid) {\n                        if (vars.fake) {\n                            vars.currLoyaltyObject = fakeData;\n                            return func(fakeData);\n                        } else {\n                            $http.get(methods.get.callableUrl(\"GetloyaltyObject?barcode=\" + barcode)).success(function (data) {\n//                                $log.info('DATA: ', data.Offers);\n                                vars.currLoyaltyObject = data;\n                                /* if (data.AllowAnonymous && !data.CustomerFirstName && !data.CustomerLastName && !data.CustomerEmail) {\n                                 $log.info('Anonymous user & Anonymous login allowed');\n                                 $http.post(methods.get.callableUrl(\"RegisterAnonymous\"), JSON.stringify(JSON.stringify({ \"Barcode\" : barcode }))).success(function (data) {\n                                 console.log(data);\n                                 loginFunc();\n                                 });\n                                 }*/\n                                return func(data);\n                            }).error(function (e) {\n                                vars.debug ? $log.error(e) : 0;\n                                return func(false);\n                            });\n                        }\n                    } else {\n                        return isBarcodeValid ? errors.missingClientUrl() : errors.invalidBarcode(barcode);\n                    }\n                }, 0);\n            },\n\n            /** @function methods.get.loyaltyObjectWithPassword(@param barcode)\n             *  Get the data associated with a particular barcode\n             * @param barcode [type: number]\n             * The barcode we want to retrieve data from\n             * @param func [type: function]\n             * @param password The user's password\n             * A callback function to which we pass the data */\n            loyaltyObjectWithPassword: function (barcode, password, func) {\n                return $timeout(function () {\n                    var isBarcodeValid = methods.validate.barcode(barcode),\n                        isClientUrlValid = methods.validate.clientUrl();\n                    if (isBarcodeValid && isClientUrlValid) {\n                        $http.get(methods.get.callableUrl(\"GetloyaltyObject?login=\" + barcode + \"&password=\" + password)).success(function (data) {\n                            $log.info('DATA: ', data.Offers);\n                            vars.currLoyaltyObject = data;\n                            return func(data);\n                        }).error(function (e) {\n                            vars.debug ? $log.error(e) : 0;\n                            return func(false);\n                        });\n                    } else return isBarcodeValid ? errors.missingClientUrl() : errors.invalidBarcode(barcode);\n\n                }, 0);\n            },\n\n            formattedOffers: function (loyaltyObj) {\n                var offers = loyaltyObj.Offers;\n                $log.info('offers', offers);\n//                var types = [];\n                var offersTypes = [];\n\n                if (offers) {\n                    /** Group valid offers by OfferTypeId */\n                    for (var i = 0; i < offers.length; i++) {\n//                    var next = i + 1;\n//                    if (next >= offers.length) next = i - 1;\n//                    if (offers[i].isValid) {\n//                        $log.info('offer is valid');\n//                        if (i === 0 || (offers[i].OfferTypeId !== offers[next].OfferTypeId)) {\n//                            $log.info('new offer type');\n//                            types.push(offers[i].OfferTypeId);\n//                            offersTypes.push(offers[i]);\n//                            offersTypes[offersTypes.length - 1].counter = 1;\n//                        } else if (types.indexOf(offers[i].OfferTypeId) > -1) {\n//                                $log.info('same offer type');\n//                                offersTypes[types.indexOf(offers[i].OfferTypeId)].counter++;\n//                        } else {\n//                            $log.info('last');\n//                            var last = offersTypes.length - 1;\n//                            last < 0 ? last = 0 : 0;\n//                            offersTypes[last] ? offersTypes[last].counter++ : 0;\n//                        }\n//                    }\n                        if (offers[i].isValid)\n                            offersTypes.push(offers[i]);\n                    }\n                }\n                return offersTypes;\n            },\n\n            /** @function methods.get.emptyPassageObj\n             *  Returns a LoyaltyOrderRequest object with empty properties */\n            emptyPassageObj: function () {\n                return {\n                    \"Login\": null,\n                    \"Password\": null,\n                    \"Key\": null,\n                    \"Barcode\": vars.currLoyaltyObject.Barcodes[0].Barcode,\n                    \"CustomerFirstName\": vars.currLoyaltyObject.CustomerFirstName,\n                    \"CustomerLastName\": vars.currLoyaltyObject.CustomerLastName,\n                    \"CustomerEmail\": vars.currLoyaltyObject.CustomerEmail,\n                    \"OrderTotalIncludeTaxes\": 0,\n                    \"OrderTotalExcludeTaxes\": 0,\n                    \"CurrencyCode\": \"EUR\",\n                    \"Items\": [],\n                    \"BalanceUpdate\": {},\n                    \"OrderSpecificInfo\": \"2\"\n                };\n            }\n        },\n\n        actions: {\n            /** @function methods.actions.useOffer\n             *  @param offer_id = the OfferId property of the offer to use\n             *  @param offer_barcode = the Barcode property of the offer to use */\n            useOffer: function (offer_id, offer_barcode) {\n                if (methods.validate.barcode(offer_barcode)) {\n                    var passageObj = methods.get.emptyPassageObj();\n                    passageObj.Offer = {\n                        \"OfferObjectId\": offer_id,\n                        \"Barcode\": offer_barcode,\n                        \"Date\": new Date()\n                    };\n                    return methods.actions.addPassage(passageObj);\n                } else {\n                    return false;\n                }\n            },\n\n            useVoucherOffer: function (offer_class_id) {\n                passagePromise = null;\n                if (!passagePromise) {\n                    passagePromise = $http.post(methods.get.callableUrl(\"UseOffer\"), JSON.stringify(JSON.stringify({\"OfferClassId\": offer_class_id}))).success(function (data) {\n                        return data;\n                    });\n                    return passagePromise;\n                }\n            },\n\n            /* @todo: @function useAvoir */\n            useAvoir: function (balance_id, amount) {\n                var passageObj = methods.get.emptyPassageObj();\n                passageObj.BalanceUpdate = {\n                    \"Id\": balance_id,\n                    \"UpdateValue\": amount\n                };\n            },\n\n            addPassage: function (obj) {\n                console.log(obj);\n                console.log(passagePromise);\n                passagePromise = null;\n                if (!passagePromise) {\n                    passagePromise = $http.post(methods.get.callableUrl(\"AddPassage\"), JSON.stringify(JSON.stringify(obj))).success(function (data) {\n                        return data;\n                    });\n                    return passagePromise;\n                }\n            },\n\n            register: function (formObj) {\n                return $timeout(function () {\n                    return $http.post(methods.get.callableUrl(\"Register\"), JSON.stringify(JSON.stringify(formObj))).success(function (data) {\n                        vars.currLoyaltyObject = data;\n                        return data;\n                    });\n                }, 0);\n            },\n\n            registerAnonymous: function (formObj) {\n                return $timeout(function () {\n                    return $http.post(methods.get.callableUrl(\"RegisterAnonymous\"), JSON.stringify(JSON.stringify(formObj))).success(function (data) {\n                        vars.currLoyaltyObject = data;\n                        return data;\n                    });\n                }, 0);\n            }\n        },\n\n        /** Methods to validate user input */\n        validate: {\n            /** @function methods.validate.clientUrl\n             * Checks if the clientUrl matches one of the correct urls in vars.validClientUrls */\n            clientUrl: function () {\n//                return !!~vars.validClientUrls.indexOf(vars.clientUrl);\n                return true;\n            },\n\n            /** @function methods.validate.barcode\n             * Checks if the barcode is a number containing either 8 or 10 characters (8 = legacy, 10 = new) */\n            barcode: function (barcode) {\n                return !!((+barcode && ~[8, 10].indexOf(barcode.toString().length)) || new RegExp(/(^[0-9]*$)|(^[_a-z0-9]+(\\.[_a-z0-9]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$)/));\n            }\n        }\n    };\n\n    /** fake LoyaltyObject for testing */\n    emptyData = {\n        \"Barcodes\": [],\n        \"LoyaltyObjectId\": 0,\n        \"CustomerId\": 0,\n        \"LoyaltyClass\": null,\n        \"CustomerFirstName\": null,\n        \"CustomerLastName\": null,\n        \"CustomerEmail\": null,\n        \"Balances\": [],\n        \"Offers\": []\n    };\n\n    fakeData = emptyData;\n\n    /** return the exposed API methods */\n    return methods;\n}]);"]}