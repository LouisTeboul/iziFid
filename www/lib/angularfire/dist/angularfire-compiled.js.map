{"version":3,"sources":["angularfire.js"],"names":[],"mappings":"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","file":"angularfire-compiled.js","sourcesContent":["/*!\n * AngularFire is the officially supported AngularJS binding for Firebase. Firebase\n * is a full backend so you don't need servers to build your Angular app. AngularFire\n * provides you with the $firebase service which allows you to easily keep your $scope\n * variables in sync with your Firebase backend.\n *\n * AngularFire 1.1.3\n * https://github.com/firebase/angularfire/\n * Date: 09/29/2015\n * License: MIT\n */\n(function(exports) {\n  \"use strict\";\n\n// Define the `firebase` module under which all AngularFire\n// services will live.\n  angular.module(\"firebase\", [])\n    //todo use $window\n    .value(\"Firebase\", exports.Firebase);\n\n})(window);\n(function() {\n  'use strict';\n  /**\n   * Creates and maintains a synchronized list of data. This is a pseudo-read-only array. One should\n   * not call splice(), push(), pop(), et al directly on this array, but should instead use the\n   * $remove and $add methods.\n   *\n   * It is acceptable to .sort() this array, but it is important to use this in conjunction with\n   * $watch(), so that it will be re-sorted any time the server data changes. Examples of this are\n   * included in the $watch documentation.\n   *\n   * Internally, the $firebase object depends on this class to provide several $$ (i.e. protected)\n   * methods, which it invokes to notify the array whenever a change has been made at the server:\n   *    $$added - called whenever a child_added event occurs\n   *    $$updated - called whenever a child_changed event occurs\n   *    $$moved - called whenever a child_moved event occurs\n   *    $$removed - called whenever a child_removed event occurs\n   *    $$error - called when listeners are canceled due to a security error\n   *    $$process - called immediately after $$added/$$updated/$$moved/$$removed\n   *                (assuming that these methods do not abort by returning false or null)\n   *                to splice/manipulate the array and invoke $$notify\n   *\n   * Additionally, these methods may be of interest to devs extending this class:\n   *    $$notify - triggers notifications to any $watch listeners, called by $$process\n   *    $$getKey - determines how to look up a record's key (returns $id by default)\n   *\n   * Instead of directly modifying this class, one should generally use the $extend\n   * method to add or change how methods behave. $extend modifies the prototype of\n   * the array class by returning a clone of $firebaseArray.\n   *\n   * <pre><code>\n   * var ExtendedArray = $firebaseArray.$extend({\n   *    // add a new method to the prototype\n   *    foo: function() { return 'bar'; },\n   *\n   *    // change how records are created\n   *    $$added: function(snap, prevChild) {\n   *       return new Widget(snap, prevChild);\n   *    },\n   *\n   *    // change how records are updated\n   *    $$updated: function(snap) {\n   *      return this.$getRecord(snap.key()).update(snap);\n   *    }\n   * });\n   *\n   * var list = new ExtendedArray(ref);\n   * </code></pre>\n   */\n  angular.module('firebase').factory('$firebaseArray', [\"$log\", \"$firebaseUtils\", \"$q\",\n    function($log, $firebaseUtils, $q) {\n      /**\n       * This constructor should probably never be called manually. It is used internally by\n       * <code>$firebase.$asArray()</code>.\n       *\n       * @param {Firebase} ref\n       * @returns {Array}\n       * @constructor\n       */\n      function FirebaseArray(ref) {\n        if( !(this instanceof FirebaseArray) ) {\n          return new FirebaseArray(ref);\n        }\n        var self = this;\n        this._observers = [];\n        this.$list = [];\n        this._ref = ref;\n        this._sync = new ArraySyncManager(this);\n\n        $firebaseUtils.assertValidRef(ref, 'Must pass a valid Firebase reference ' +\n        'to $firebaseArray (not a string or URL)');\n\n        // indexCache is a weak hashmap (a lazy list) of keys to array indices,\n        // items are not guaranteed to stay up to date in this list (since the data\n        // array can be manually edited without calling the $ methods) and it should\n        // always be used with skepticism regarding whether it is accurate\n        // (see $indexFor() below for proper usage)\n        this._indexCache = {};\n\n        // Array.isArray will not work on objects which extend the Array class.\n        // So instead of extending the Array class, we just return an actual array.\n        // However, it's still possible to extend FirebaseArray and have the public methods\n        // appear on the array object. We do this by iterating the prototype and binding\n        // any method that is not prefixed with an underscore onto the final array.\n        $firebaseUtils.getPublicMethods(self, function(fn, key) {\n          self.$list[key] = fn.bind(self);\n        });\n\n        this._sync.init(this.$list);\n\n        return this.$list;\n      }\n\n      FirebaseArray.prototype = {\n        /**\n         * Create a new record with a unique ID and add it to the end of the array.\n         * This should be used instead of Array.prototype.push, since those changes will not be\n         * synchronized with the server.\n         *\n         * Any value, including a primitive, can be added in this way. Note that when the record\n         * is created, the primitive value would be stored in $value (records are always objects\n         * by default).\n         *\n         * Returns a future which is resolved when the data has successfully saved to the server.\n         * The resolve callback will be passed a Firebase ref representing the new data element.\n         *\n         * @param data\n         * @returns a promise resolved after data is added\n         */\n        $add: function(data) {\n          this._assertNotDestroyed('$add');\n          var def = $firebaseUtils.defer();\n          var ref = this.$ref().ref().push();\n          ref.set($firebaseUtils.toJSON(data), $firebaseUtils.makeNodeResolver(def));\n          return def.promise.then(function() {\n            return ref;\n          });\n        },\n\n        /**\n         * Pass either an item in the array or the index of an item and it will be saved back\n         * to Firebase. While the array is read-only and its structure should not be changed,\n         * it is okay to modify properties on the objects it contains and then save those back\n         * individually.\n         *\n         * Returns a future which is resolved when the data has successfully saved to the server.\n         * The resolve callback will be passed a Firebase ref representing the saved element.\n         * If passed an invalid index or an object which is not a record in this array,\n         * the promise will be rejected.\n         *\n         * @param {int|object} indexOrItem\n         * @returns a promise resolved after data is saved\n         */\n        $save: function(indexOrItem) {\n          this._assertNotDestroyed('$save');\n          var self = this;\n          var item = self._resolveItem(indexOrItem);\n          var key = self.$keyAt(item);\n          if( key !== null ) {\n            var ref = self.$ref().ref().child(key);\n            var data = $firebaseUtils.toJSON(item);\n            return $firebaseUtils.doSet(ref, data).then(function() {\n              self.$$notify('child_changed', key);\n              return ref;\n            });\n          }\n          else {\n            return $firebaseUtils.reject('Invalid record; could determine key for '+indexOrItem);\n          }\n        },\n\n        /**\n         * Pass either an existing item in this array or the index of that item and it will\n         * be removed both locally and in Firebase. This should be used in place of\n         * Array.prototype.splice for removing items out of the array, as calling splice\n         * will not update the value on the server.\n         *\n         * Returns a future which is resolved when the data has successfully removed from the\n         * server. The resolve callback will be passed a Firebase ref representing the deleted\n         * element. If passed an invalid index or an object which is not a record in this array,\n         * the promise will be rejected.\n         *\n         * @param {int|object} indexOrItem\n         * @returns a promise which resolves after data is removed\n         */\n        $remove: function(indexOrItem) {\n          this._assertNotDestroyed('$remove');\n          var key = this.$keyAt(indexOrItem);\n          if( key !== null ) {\n            var ref = this.$ref().ref().child(key);\n            return $firebaseUtils.doRemove(ref).then(function() {\n              return ref;\n            });\n          }\n          else {\n            return $firebaseUtils.reject('Invalid record; could not determine key for '+indexOrItem);\n          }\n        },\n\n        /**\n         * Given an item in this array or the index of an item in the array, this returns the\n         * Firebase key (record.$id) for that record. If passed an invalid key or an item which\n         * does not exist in this array, it will return null.\n         *\n         * @param {int|object} indexOrItem\n         * @returns {null|string}\n         */\n        $keyAt: function(indexOrItem) {\n          var item = this._resolveItem(indexOrItem);\n          return this.$$getKey(item);\n        },\n\n        /**\n         * The inverse of $keyAt, this method takes a Firebase key (record.$id) and returns the\n         * index in the array where that record is stored. If the record is not in the array,\n         * this method returns -1.\n         *\n         * @param {String} key\n         * @returns {int} -1 if not found\n         */\n        $indexFor: function(key) {\n          var self = this;\n          var cache = self._indexCache;\n          // evaluate whether our key is cached and, if so, whether it is up to date\n          if( !cache.hasOwnProperty(key) || self.$keyAt(cache[key]) !== key ) {\n            // update the hashmap\n            var pos = self.$list.findIndex(function(rec) { return self.$$getKey(rec) === key; });\n            if( pos !== -1 ) {\n              cache[key] = pos;\n            }\n          }\n          return cache.hasOwnProperty(key)? cache[key] : -1;\n        },\n\n        /**\n         * The loaded method is invoked after the initial batch of data arrives from the server.\n         * When this resolves, all data which existed prior to calling $asArray() is now cached\n         * locally in the array.\n         *\n         * As a shortcut is also possible to pass resolve/reject methods directly into this\n         * method just as they would be passed to .then()\n         *\n         * @param {Function} [resolve]\n         * @param {Function} [reject]\n         * @returns a promise\n         */\n        $loaded: function(resolve, reject) {\n          var promise = this._sync.ready();\n          if( arguments.length ) {\n            // allow this method to be called just like .then\n            // by passing any arguments on to .then\n            promise = promise.then.call(promise, resolve, reject);\n          }\n          return promise;\n        },\n\n        /**\n         * @returns {Firebase} the original Firebase ref used to create this object.\n         */\n        $ref: function() { return this._ref; },\n\n        /**\n         * Listeners passed into this method are notified whenever a new change (add, updated,\n         * move, remove) is received from the server. Each invocation is sent an object\n         * containing <code>{ type: 'child_added|child_updated|child_moved|child_removed',\n         * key: 'key_of_item_affected'}</code>\n         *\n         * Additionally, added and moved events receive a prevChild parameter, containing the\n         * key of the item before this one in the array.\n         *\n         * This method returns a function which can be invoked to stop observing events.\n         *\n         * @param {Function} cb\n         * @param {Object} [context]\n         * @returns {Function} used to stop observing\n         */\n        $watch: function(cb, context) {\n          var list = this._observers;\n          list.push([cb, context]);\n          // an off function for cancelling the listener\n          return function() {\n            var i = list.findIndex(function(parts) {\n              return parts[0] === cb && parts[1] === context;\n            });\n            if( i > -1 ) {\n              list.splice(i, 1);\n            }\n          };\n        },\n\n        /**\n         * Informs $firebase to stop sending events and clears memory being used\n         * by this array (delete's its local content).\n         */\n        $destroy: function(err) {\n          if( !this._isDestroyed ) {\n            this._isDestroyed = true;\n            this._sync.destroy(err);\n            this.$list.length = 0;\n          }\n        },\n\n        /**\n         * Returns the record for a given Firebase key (record.$id). If the record is not found\n         * then returns null.\n         *\n         * @param {string} key\n         * @returns {Object|null} a record in this array\n         */\n        $getRecord: function(key) {\n          var i = this.$indexFor(key);\n          return i > -1? this.$list[i] : null;\n        },\n\n        /**\n         * Called to inform the array when a new item has been added at the server.\n         * This method should return the record (an object) that will be passed into $$process\n         * along with the add event. Alternately, the record will be skipped if this method returns\n         * a falsey value.\n         *\n         * @param {object} snap a Firebase snapshot\n         * @param {string} prevChild\n         * @return {object} the record to be inserted into the array\n         * @protected\n         */\n        $$added: function(snap/*, prevChild*/) {\n          // check to make sure record does not exist\n          var i = this.$indexFor($firebaseUtils.getKey(snap));\n          if( i === -1 ) {\n            // parse data and create record\n            var rec = snap.val();\n            if( !angular.isObject(rec) ) {\n              rec = { $value: rec };\n            }\n            rec.$id = $firebaseUtils.getKey(snap);\n            rec.$priority = snap.getPriority();\n            $firebaseUtils.applyDefaults(rec, this.$$defaults);\n\n            return rec;\n          }\n          return false;\n        },\n\n        /**\n         * Called whenever an item is removed at the server.\n         * This method does not physically remove the objects, but instead\n         * returns a boolean indicating whether it should be removed (and\n         * taking any other desired actions before the remove completes).\n         *\n         * @param {object} snap a Firebase snapshot\n         * @return {boolean} true if item should be removed\n         * @protected\n         */\n        $$removed: function(snap) {\n          return this.$indexFor($firebaseUtils.getKey(snap)) > -1;\n        },\n\n        /**\n         * Called whenever an item is changed at the server.\n         * This method should apply the changes, including changes to data\n         * and to $priority, and then return true if any changes were made.\n         *\n         * If this method returns false, then $$process will not be invoked,\n         * which means that $$notify will not take place and no $watch events\n         * will be triggered.\n         *\n         * @param {object} snap a Firebase snapshot\n         * @return {boolean} true if any data changed\n         * @protected\n         */\n        $$updated: function(snap) {\n          var changed = false;\n          var rec = this.$getRecord($firebaseUtils.getKey(snap));\n          if( angular.isObject(rec) ) {\n            // apply changes to the record\n            changed = $firebaseUtils.updateRec(rec, snap);\n            $firebaseUtils.applyDefaults(rec, this.$$defaults);\n          }\n          return changed;\n        },\n\n        /**\n         * Called whenever an item changes order (moves) on the server.\n         * This method should set $priority to the updated value and return true if\n         * the record should actually be moved. It should not actually apply the move\n         * operation.\n         *\n         * If this method returns false, then the record will not be moved in the array\n         * and no $watch listeners will be notified. (When true, $$process is invoked\n         * which invokes $$notify)\n         *\n         * @param {object} snap a Firebase snapshot\n         * @param {string} prevChild\n         * @protected\n         */\n        $$moved: function(snap/*, prevChild*/) {\n          var rec = this.$getRecord($firebaseUtils.getKey(snap));\n          if( angular.isObject(rec) ) {\n            rec.$priority = snap.getPriority();\n            return true;\n          }\n          return false;\n        },\n\n        /**\n         * Called whenever a security error or other problem causes the listeners to become\n         * invalid. This is generally an unrecoverable error.\n         *\n         * @param {Object} err which will have a `code` property and possibly a `message`\n         * @protected\n         */\n        $$error: function(err) {\n          $log.error(err);\n          this.$destroy(err);\n        },\n\n        /**\n         * Returns ID for a given record\n         * @param {object} rec\n         * @returns {string||null}\n         * @protected\n         */\n        $$getKey: function(rec) {\n          return angular.isObject(rec)? rec.$id : null;\n        },\n\n        /**\n         * Handles placement of recs in the array, sending notifications,\n         * and other internals. Called by the synchronization process\n         * after $$added, $$updated, $$moved, and $$removed return a truthy value.\n         *\n         * @param {string} event one of child_added, child_removed, child_moved, or child_changed\n         * @param {object} rec\n         * @param {string} [prevChild]\n         * @protected\n         */\n        $$process: function(event, rec, prevChild) {\n          var key = this.$$getKey(rec);\n          var changed = false;\n          var curPos;\n          switch(event) {\n            case 'child_added':\n              curPos = this.$indexFor(key);\n              break;\n            case 'child_moved':\n              curPos = this.$indexFor(key);\n              this._spliceOut(key);\n              break;\n            case 'child_removed':\n              // remove record from the array\n              changed = this._spliceOut(key) !== null;\n              break;\n            case 'child_changed':\n              changed = true;\n              break;\n            default:\n              throw new Error('Invalid event type: ' + event);\n          }\n          if( angular.isDefined(curPos) ) {\n            // add it to the array\n            changed = this._addAfter(rec, prevChild) !== curPos;\n          }\n          if( changed ) {\n            // send notifications to anybody monitoring $watch\n            this.$$notify(event, key, prevChild);\n          }\n          return changed;\n        },\n\n        /**\n         * Used to trigger notifications for listeners registered using $watch. This method is\n         * typically invoked internally by the $$process method.\n         *\n         * @param {string} event\n         * @param {string} key\n         * @param {string} [prevChild]\n         * @protected\n         */\n        $$notify: function(event, key, prevChild) {\n          var eventData = {event: event, key: key};\n          if( angular.isDefined(prevChild) ) {\n            eventData.prevChild = prevChild;\n          }\n          angular.forEach(this._observers, function(parts) {\n            parts[0].call(parts[1], eventData);\n          });\n        },\n\n        /**\n         * Used to insert a new record into the array at a specific position. If prevChild is\n         * null, is inserted first, if prevChild is not found, it is inserted last, otherwise,\n         * it goes immediately after prevChild.\n         *\n         * @param {object} rec\n         * @param {string|null} prevChild\n         * @private\n         */\n        _addAfter: function(rec, prevChild) {\n          var i;\n          if( prevChild === null ) {\n            i = 0;\n          }\n          else {\n            i = this.$indexFor(prevChild)+1;\n            if( i === 0 ) { i = this.$list.length; }\n          }\n          this.$list.splice(i, 0, rec);\n          this._indexCache[this.$$getKey(rec)] = i;\n          return i;\n        },\n\n        /**\n         * Removes a record from the array by calling splice. If the item is found\n         * this method returns it. Otherwise, this method returns null.\n         *\n         * @param {string} key\n         * @returns {object|null}\n         * @private\n         */\n        _spliceOut: function(key) {\n          var i = this.$indexFor(key);\n          if( i > -1 ) {\n            delete this._indexCache[key];\n            return this.$list.splice(i, 1)[0];\n          }\n          return null;\n        },\n\n        /**\n         * Resolves a variable which may contain an integer or an item that exists in this array.\n         * Returns the item or null if it does not exist.\n         *\n         * @param indexOrItem\n         * @returns {*}\n         * @private\n         */\n        _resolveItem: function(indexOrItem) {\n          var list = this.$list;\n          if( angular.isNumber(indexOrItem) && indexOrItem >= 0 && list.length >= indexOrItem ) {\n            return list[indexOrItem];\n          }\n          else if( angular.isObject(indexOrItem) ) {\n            // it must be an item in this array; it's not sufficient for it just to have\n            // a $id or even a $id that is in the array, it must be an actual record\n            // the fastest way to determine this is to use $getRecord (to avoid iterating all recs)\n            // and compare the two\n            var key = this.$$getKey(indexOrItem);\n            var rec = this.$getRecord(key);\n            return rec === indexOrItem? rec : null;\n          }\n          return null;\n        },\n\n        /**\n         * Throws an error if $destroy has been called. Should be used for any function\n         * which tries to write data back to $firebase.\n         * @param {string} method\n         * @private\n         */\n        _assertNotDestroyed: function(method) {\n          if( this._isDestroyed ) {\n            throw new Error('Cannot call ' + method + ' method on a destroyed $firebaseArray object');\n          }\n        }\n      };\n\n      /**\n       * This method allows FirebaseArray to be inherited by child classes. Methods passed into this\n       * function will be added onto the array's prototype. They can override existing methods as\n       * well.\n       *\n       * In addition to passing additional methods, it is also possible to pass in a class function.\n       * The prototype on that class function will be preserved, and it will inherit from\n       * FirebaseArray. It's also possible to do both, passing a class to inherit and additional\n       * methods to add onto the prototype.\n       *\n       *  <pre><code>\n       * var ExtendedArray = $firebaseArray.$extend({\n       *    // add a method onto the prototype that sums all items in the array\n       *    getSum: function() {\n       *       var ct = 0;\n       *       angular.forEach(this.$list, function(rec) { ct += rec.x; });\n        *      return ct;\n       *    }\n       * });\n       *\n       * // use our new factory in place of $firebaseArray\n       * var list = new ExtendedArray(ref);\n       * </code></pre>\n       *\n       * @param {Function} [ChildClass] a child class which should inherit FirebaseArray\n       * @param {Object} [methods] a list of functions to add onto the prototype\n       * @returns {Function} a child class suitable for use with $firebase (this will be ChildClass if provided)\n       * @static\n       */\n      FirebaseArray.$extend = function(ChildClass, methods) {\n        if( arguments.length === 1 && angular.isObject(ChildClass) ) {\n          methods = ChildClass;\n          ChildClass = function(ref) {\n            if( !(this instanceof ChildClass) ) {\n              return new ChildClass(ref);\n            }\n            FirebaseArray.apply(this, arguments);\n            return this.$list;\n          };\n        }\n        return $firebaseUtils.inherit(ChildClass, FirebaseArray, methods);\n      };\n\n      function ArraySyncManager(firebaseArray) {\n        function destroy(err) {\n          if( !sync.isDestroyed ) {\n            sync.isDestroyed = true;\n            var ref = firebaseArray.$ref();\n            ref.off('child_added', created);\n            ref.off('child_moved', moved);\n            ref.off('child_changed', updated);\n            ref.off('child_removed', removed);\n            firebaseArray = null;\n            initComplete(err||'destroyed');\n          }\n        }\n\n        function init($list) {\n          var ref = firebaseArray.$ref();\n\n          // listen for changes at the Firebase instance\n          ref.on('child_added', created, error);\n          ref.on('child_moved', moved, error);\n          ref.on('child_changed', updated, error);\n          ref.on('child_removed', removed, error);\n\n          // determine when initial load is completed\n          ref.once('value', function(snap) {\n            if (angular.isArray(snap.val())) {\n              $log.warn('Storing data using array indices in Firebase can result in unexpected behavior. See https://www.firebase.com/docs/web/guide/understanding-data.html#section-arrays-in-firebase for more information.');\n            }\n\n            initComplete(null, $list);\n          }, initComplete);\n        }\n\n        // call initComplete(), do not call this directly\n        function _initComplete(err, result) {\n          if( !isResolved ) {\n            isResolved = true;\n            if( err ) { def.reject(err); }\n            else { def.resolve(result); }\n          }\n        }\n\n        var def     = $firebaseUtils.defer();\n        var created = function(snap, prevChild) {\n          waitForResolution(firebaseArray.$$added(snap, prevChild), function(rec) {\n            firebaseArray.$$process('child_added', rec, prevChild);\n          });\n        };\n        var updated = function(snap) {\n          var rec = firebaseArray.$getRecord($firebaseUtils.getKey(snap));\n          if( rec ) {\n            waitForResolution(firebaseArray.$$updated(snap), function() {\n              firebaseArray.$$process('child_changed', rec);\n            });\n          }\n        };\n        var moved   = function(snap, prevChild) {\n          var rec = firebaseArray.$getRecord($firebaseUtils.getKey(snap));\n          if( rec ) {\n            waitForResolution(firebaseArray.$$moved(snap, prevChild), function() {\n              firebaseArray.$$process('child_moved', rec, prevChild);\n            });\n          }\n        };\n        var removed = function(snap) {\n          var rec = firebaseArray.$getRecord($firebaseUtils.getKey(snap));\n          if( rec ) {\n            waitForResolution(firebaseArray.$$removed(snap), function() {\n               firebaseArray.$$process('child_removed', rec);\n            });\n          }\n        };\n\n        function waitForResolution(maybePromise, callback) {\n          var promise = $q.when(maybePromise);\n          promise.then(function(result){\n            if (result) {\n              callback(result);\n            }\n          });\n          if (!isResolved) {\n            resolutionPromises.push(promise);\n          }\n        }\n\n        var resolutionPromises = [];\n        var isResolved = false;\n        var error   = $firebaseUtils.batch(function(err) {\n          _initComplete(err);\n          if( firebaseArray ) {\n            firebaseArray.$$error(err);\n          }\n        });\n        var initComplete = $firebaseUtils.batch(_initComplete);\n\n        var sync = {\n          destroy: destroy,\n          isDestroyed: false,\n          init: init,\n          ready: function() { return def.promise.then(function(result){\n            return $q.all(resolutionPromises).then(function(){\n              return result;\n            });\n          }); }\n        };\n\n        return sync;\n      }\n\n      return FirebaseArray;\n    }\n  ]);\n\n  /** @deprecated */\n  angular.module('firebase').factory('$FirebaseArray', ['$log', '$firebaseArray',\n    function($log, $firebaseArray) {\n      return function() {\n        $log.warn('$FirebaseArray has been renamed. Use $firebaseArray instead.');\n        return $firebaseArray.apply(null, arguments);\n      };\n    }\n  ]);\n})();\n\n(function() {\n  'use strict';\n  var FirebaseAuth;\n\n  // Define a service which provides user authentication and management.\n  angular.module('firebase').factory('$firebaseAuth', [\n    '$q', '$firebaseUtils', function($q, $firebaseUtils) {\n      /**\n       * This factory returns an object allowing you to manage the client's authentication state.\n       *\n       * @param {Firebase} ref A Firebase reference to authenticate.\n       * @return {object} An object containing methods for authenticating clients, retrieving\n       * authentication state, and managing users.\n       */\n      return function(ref) {\n        var auth = new FirebaseAuth($q, $firebaseUtils, ref);\n        return auth.construct();\n      };\n    }\n  ]);\n\n  FirebaseAuth = function($q, $firebaseUtils, ref) {\n    this._q = $q;\n    this._utils = $firebaseUtils;\n    if (typeof ref === 'string') {\n      throw new Error('Please provide a Firebase reference instead of a URL when creating a `$firebaseAuth` object.');\n    }\n    this._ref = ref;\n    this._initialAuthResolver = this._initAuthResolver();\n  };\n\n  FirebaseAuth.prototype = {\n    construct: function() {\n      this._object = {\n        // Authentication methods\n        $authWithCustomToken: this.authWithCustomToken.bind(this),\n        $authAnonymously: this.authAnonymously.bind(this),\n        $authWithPassword: this.authWithPassword.bind(this),\n        $authWithOAuthPopup: this.authWithOAuthPopup.bind(this),\n        $authWithOAuthRedirect: this.authWithOAuthRedirect.bind(this),\n        $authWithOAuthToken: this.authWithOAuthToken.bind(this),\n        $unauth: this.unauth.bind(this),\n\n        // Authentication state methods\n        $onAuth: this.onAuth.bind(this),\n        $getAuth: this.getAuth.bind(this),\n        $requireAuth: this.requireAuth.bind(this),\n        $waitForAuth: this.waitForAuth.bind(this),\n\n        // User management methods\n        $createUser: this.createUser.bind(this),\n        $changePassword: this.changePassword.bind(this),\n        $changeEmail: this.changeEmail.bind(this),\n        $removeUser: this.removeUser.bind(this),\n        $resetPassword: this.resetPassword.bind(this)\n      };\n\n      return this._object;\n    },\n\n\n    /********************/\n    /*  Authentication  */\n    /********************/\n\n    /**\n     * Authenticates the Firebase reference with a custom authentication token.\n     *\n     * @param {string} authToken An authentication token or a Firebase Secret. A Firebase Secret\n     * should only be used for authenticating a server process and provides full read / write\n     * access to the entire Firebase.\n     * @param {Object} [options] An object containing optional client arguments, such as configuring\n     * session persistence.\n     * @return {Promise<Object>} A promise fulfilled with an object containing authentication data.\n     */\n    authWithCustomToken: function(authToken, options) {\n      var deferred = this._q.defer();\n\n      try {\n        this._ref.authWithCustomToken(authToken, this._utils.makeNodeResolver(deferred), options);\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Authenticates the Firebase reference anonymously.\n     *\n     * @param {Object} [options] An object containing optional client arguments, such as configuring\n     * session persistence.\n     * @return {Promise<Object>} A promise fulfilled with an object containing authentication data.\n     */\n    authAnonymously: function(options) {\n      var deferred = this._q.defer();\n\n      try {\n        this._ref.authAnonymously(this._utils.makeNodeResolver(deferred), options);\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Authenticates the Firebase reference with an email/password user.\n     *\n     * @param {Object} credentials An object containing email and password attributes corresponding\n     * to the user account.\n     * @param {Object} [options] An object containing optional client arguments, such as configuring\n     * session persistence.\n     * @return {Promise<Object>} A promise fulfilled with an object containing authentication data.\n     */\n    authWithPassword: function(credentials, options) {\n      var deferred = this._q.defer();\n\n      try {\n        this._ref.authWithPassword(credentials, this._utils.makeNodeResolver(deferred), options);\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Authenticates the Firebase reference with the OAuth popup flow.\n     *\n     * @param {string} provider The unique string identifying the OAuth provider to authenticate\n     * with, e.g. google.\n     * @param {Object} [options] An object containing optional client arguments, such as configuring\n     * session persistence.\n     * @return {Promise<Object>} A promise fulfilled with an object containing authentication data.\n     */\n    authWithOAuthPopup: function(provider, options) {\n      var deferred = this._q.defer();\n\n      try {\n        this._ref.authWithOAuthPopup(provider, this._utils.makeNodeResolver(deferred), options);\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Authenticates the Firebase reference with the OAuth redirect flow.\n     *\n     * @param {string} provider The unique string identifying the OAuth provider to authenticate\n     * with, e.g. google.\n     * @param {Object} [options] An object containing optional client arguments, such as configuring\n     * session persistence.\n     * @return {Promise<Object>} A promise fulfilled with an object containing authentication data.\n     */\n    authWithOAuthRedirect: function(provider, options) {\n      var deferred = this._q.defer();\n\n      try {\n        this._ref.authWithOAuthRedirect(provider, this._utils.makeNodeResolver(deferred), options);\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Authenticates the Firebase reference with an OAuth token.\n     *\n     * @param {string} provider The unique string identifying the OAuth provider to authenticate\n     * with, e.g. google.\n     * @param {string|Object} credentials Either a string, such as an OAuth 2.0 access token, or an\n     * Object of key / value pairs, such as a set of OAuth 1.0a credentials.\n     * @param {Object} [options] An object containing optional client arguments, such as configuring\n     * session persistence.\n     * @return {Promise<Object>} A promise fulfilled with an object containing authentication data.\n     */\n    authWithOAuthToken: function(provider, credentials, options) {\n      var deferred = this._q.defer();\n\n      try {\n        this._ref.authWithOAuthToken(provider, credentials, this._utils.makeNodeResolver(deferred), options);\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Unauthenticates the Firebase reference.\n     */\n    unauth: function() {\n      if (this.getAuth() !== null) {\n        this._ref.unauth();\n      }\n    },\n\n\n    /**************************/\n    /*  Authentication State  */\n    /**************************/\n    /**\n     * Asynchronously fires the provided callback with the current authentication data every time\n     * the authentication data changes. It also fires as soon as the authentication data is\n     * retrieved from the server.\n     *\n     * @param {function} callback A callback that fires when the client's authenticate state\n     * changes. If authenticated, the callback will be passed an object containing authentication\n     * data according to the provider used to authenticate. Otherwise, it will be passed null.\n     * @param {string} [context] If provided, this object will be used as this when calling your\n     * callback.\n     * @return {function} A function which can be used to deregister the provided callback.\n     */\n    onAuth: function(callback, context) {\n      var self = this;\n\n      var fn = this._utils.debounce(callback, context, 0);\n      this._ref.onAuth(fn);\n\n      // Return a method to detach the `onAuth()` callback.\n      return function() {\n        self._ref.offAuth(fn);\n      };\n    },\n\n    /**\n     * Synchronously retrieves the current authentication data.\n     *\n     * @return {Object} The client's authentication data.\n     */\n    getAuth: function() {\n      return this._ref.getAuth();\n    },\n\n    /**\n     * Helper onAuth() callback method for the two router-related methods.\n     *\n     * @param {boolean} rejectIfAuthDataIsNull Determines if the returned promise should be\n     * resolved or rejected upon an unauthenticated client.\n     * @return {Promise<Object>} A promise fulfilled with the client's authentication state or\n     * rejected if the client is unauthenticated and rejectIfAuthDataIsNull is true.\n     */\n    _routerMethodOnAuthPromise: function(rejectIfAuthDataIsNull) {\n      var ref = this._ref, utils = this._utils;\n      // wait for the initial auth state to resolve; on page load we have to request auth state\n      // asynchronously so we don't want to resolve router methods or flash the wrong state\n      return this._initialAuthResolver.then(function() {\n        // auth state may change in the future so rather than depend on the initially resolved state\n        // we also check the auth data (synchronously) if a new promise is requested, ensuring we resolve\n        // to the current auth state and not a stale/initial state\n        var authData = ref.getAuth(), res = null;\n        if (rejectIfAuthDataIsNull && authData === null) {\n          res = utils.reject(\"AUTH_REQUIRED\");\n        }\n        else {\n          res = utils.resolve(authData);\n        }\n        return res;\n      });\n    },\n\n    /**\n     * Helper that returns a promise which resolves when the initial auth state has been\n     * fetched from the Firebase server. This never rejects and resolves to undefined.\n     *\n     * @return {Promise<Object>} A promise fulfilled when the server returns initial auth state.\n     */\n    _initAuthResolver: function() {\n      var ref = this._ref;\n      return this._utils.promise(function(resolve) {\n        function callback() {\n          // Turn off this onAuth() callback since we just needed to get the authentication data once.\n          ref.offAuth(callback);\n          resolve();\n        }\n        ref.onAuth(callback);\n      });\n    },\n\n    /**\n     * Utility method which can be used in a route's resolve() method to require that a route has\n     * a logged in client.\n     *\n     * @returns {Promise<Object>} A promise fulfilled with the client's current authentication\n     * state or rejected if the client is not authenticated.\n     */\n    requireAuth: function() {\n      return this._routerMethodOnAuthPromise(true);\n    },\n\n    /**\n     * Utility method which can be used in a route's resolve() method to grab the current\n     * authentication data.\n     *\n     * @returns {Promise<Object|null>} A promise fulfilled with the client's current authentication\n     * state, which will be null if the client is not authenticated.\n     */\n    waitForAuth: function() {\n      return this._routerMethodOnAuthPromise(false);\n    },\n\n\n    /*********************/\n    /*  User Management  */\n    /*********************/\n    /**\n     * Creates a new email/password user. Note that this function only creates the user, if you\n     * wish to log in as the newly created user, call $authWithPassword() after the promise for\n     * this method has been resolved.\n     *\n     * @param {Object} credentials An object containing the email and password of the user to create.\n     * @return {Promise<Object>} A promise fulfilled with the user object, which contains the\n     * uid of the created user.\n     */\n    createUser: function(credentials) {\n      var deferred = this._q.defer();\n\n      // Throw an error if they are trying to pass in separate string arguments\n      if (typeof credentials === \"string\") {\n        throw new Error(\"$createUser() expects an object containing 'email' and 'password', but got a string.\");\n      }\n\n      try {\n        this._ref.createUser(credentials, this._utils.makeNodeResolver(deferred));\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Changes the password for an email/password user.\n     *\n     * @param {Object} credentials An object containing the email, old password, and new password of\n     * the user whose password is to change.\n     * @return {Promise<>} An empty promise fulfilled once the password change is complete.\n     */\n    changePassword: function(credentials) {\n      var deferred = this._q.defer();\n\n      // Throw an error if they are trying to pass in separate string arguments\n      if (typeof credentials === \"string\") {\n        throw new Error(\"$changePassword() expects an object containing 'email', 'oldPassword', and 'newPassword', but got a string.\");\n      }\n\n      try {\n        this._ref.changePassword(credentials, this._utils.makeNodeResolver(deferred));\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Changes the email for an email/password user.\n     *\n     * @param {Object} credentials An object containing the old email, new email, and password of\n     * the user whose email is to change.\n     * @return {Promise<>} An empty promise fulfilled once the email change is complete.\n     */\n    changeEmail: function(credentials) {\n      var deferred = this._q.defer();\n\n      if (typeof this._ref.changeEmail !== 'function') {\n        throw new Error(\"$firebaseAuth.$changeEmail() requires Firebase version 2.1.0 or greater.\");\n      } else if (typeof credentials === 'string') {\n        throw new Error(\"$changeEmail() expects an object containing 'oldEmail', 'newEmail', and 'password', but got a string.\");\n      }\n\n      try {\n        this._ref.changeEmail(credentials, this._utils.makeNodeResolver(deferred));\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n    /**\n     * Removes an email/password user.\n     *\n     * @param {Object} credentials An object containing the email and password of the user to remove.\n     * @return {Promise<>} An empty promise fulfilled once the user is removed.\n     */\n    removeUser: function(credentials) {\n      var deferred = this._q.defer();\n\n      // Throw an error if they are trying to pass in separate string arguments\n      if (typeof credentials === \"string\") {\n        throw new Error(\"$removeUser() expects an object containing 'email' and 'password', but got a string.\");\n      }\n\n      try {\n        this._ref.removeUser(credentials, this._utils.makeNodeResolver(deferred));\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    },\n\n\n    /**\n     * Sends a password reset email to an email/password user.\n     *\n     * @param {Object} credentials An object containing the email of the user to send a reset\n     * password email to.\n     * @return {Promise<>} An empty promise fulfilled once the reset password email is sent.\n     */\n    resetPassword: function(credentials) {\n      var deferred = this._q.defer();\n\n      // Throw an error if they are trying to pass in a string argument\n      if (typeof credentials === \"string\") {\n        throw new Error(\"$resetPassword() expects an object containing 'email', but got a string.\");\n      }\n\n      try {\n        this._ref.resetPassword(credentials, this._utils.makeNodeResolver(deferred));\n      } catch (error) {\n        deferred.reject(error);\n      }\n\n      return deferred.promise;\n    }\n  };\n})();\n\n(function() {\n  'use strict';\n  /**\n   * Creates and maintains a synchronized object, with 2-way bindings between Angular and Firebase.\n   *\n   * Implementations of this class are contracted to provide the following internal methods,\n   * which are used by the synchronization process and 3-way bindings:\n   *    $$updated - called whenever a change occurs (a value event from Firebase)\n   *    $$error - called when listeners are canceled due to a security error\n   *    $$notify - called to update $watch listeners and trigger updates to 3-way bindings\n   *    $ref - called to obtain the underlying Firebase reference\n   *\n   * Instead of directly modifying this class, one should generally use the $extend\n   * method to add or change how methods behave:\n   *\n   * <pre><code>\n   * var ExtendedObject = $firebaseObject.$extend({\n   *    // add a new method to the prototype\n   *    foo: function() { return 'bar'; },\n   * });\n   *\n   * var obj = new ExtendedObject(ref);\n   * </code></pre>\n   */\n  angular.module('firebase').factory('$firebaseObject', [\n    '$parse', '$firebaseUtils', '$log',\n    function($parse, $firebaseUtils, $log) {\n      /**\n       * Creates a synchronized object with 2-way bindings between Angular and Firebase.\n       *\n       * @param {Firebase} ref\n       * @returns {FirebaseObject}\n       * @constructor\n       */\n      function FirebaseObject(ref) {\n        if( !(this instanceof FirebaseObject) ) {\n          return new FirebaseObject(ref);\n        }\n        // These are private config props and functions used internally\n        // they are collected here to reduce clutter in console.log and forEach\n        this.$$conf = {\n          // synchronizes data to Firebase\n          sync: new ObjectSyncManager(this, ref),\n          // stores the Firebase ref\n          ref: ref,\n          // synchronizes $scope variables with this object\n          binding: new ThreeWayBinding(this),\n          // stores observers registered with $watch\n          listeners: []\n        };\n\n        // this bit of magic makes $$conf non-enumerable and non-configurable\n        // and non-writable (its properties are still writable but the ref cannot be replaced)\n        // we redundantly assign it above so the IDE can relax\n        Object.defineProperty(this, '$$conf', {\n          value: this.$$conf\n        });\n\n        this.$id = $firebaseUtils.getKey(ref.ref());\n        this.$priority = null;\n\n        $firebaseUtils.applyDefaults(this, this.$$defaults);\n\n        // start synchronizing data with Firebase\n        this.$$conf.sync.init();\n      }\n\n      FirebaseObject.prototype = {\n        /**\n         * Saves all data on the FirebaseObject back to Firebase.\n         * @returns a promise which will resolve after the save is completed.\n         */\n        $save: function () {\n          var self = this;\n          var ref = self.$ref();\n          var data = $firebaseUtils.toJSON(self);\n          return $firebaseUtils.doSet(ref, data).then(function() {\n            self.$$notify();\n            return self.$ref();\n          });\n        },\n\n        /**\n         * Removes all keys from the FirebaseObject and also removes\n         * the remote data from the server.\n         *\n         * @returns a promise which will resolve after the op completes\n         */\n        $remove: function() {\n          var self = this;\n          $firebaseUtils.trimKeys(self, {});\n          self.$value = null;\n          return $firebaseUtils.doRemove(self.$ref()).then(function() {\n            self.$$notify();\n            return self.$ref();\n          });\n        },\n\n        /**\n         * The loaded method is invoked after the initial batch of data arrives from the server.\n         * When this resolves, all data which existed prior to calling $asObject() is now cached\n         * locally in the object.\n         *\n         * As a shortcut is also possible to pass resolve/reject methods directly into this\n         * method just as they would be passed to .then()\n         *\n         * @param {Function} resolve\n         * @param {Function} reject\n         * @returns a promise which resolves after initial data is downloaded from Firebase\n         */\n        $loaded: function(resolve, reject) {\n          var promise = this.$$conf.sync.ready();\n          if (arguments.length) {\n            // allow this method to be called just like .then\n            // by passing any arguments on to .then\n            promise = promise.then.call(promise, resolve, reject);\n          }\n          return promise;\n        },\n\n        /**\n         * @returns {Firebase} the original Firebase instance used to create this object.\n         */\n        $ref: function () {\n          return this.$$conf.ref;\n        },\n\n        /**\n         * Creates a 3-way data sync between this object, the Firebase server, and a\n         * scope variable. This means that any changes made to the scope variable are\n         * pushed to Firebase, and vice versa.\n         *\n         * If scope emits a $destroy event, the binding is automatically severed. Otherwise,\n         * it is possible to unbind the scope variable by using the `unbind` function\n         * passed into the resolve method.\n         *\n         * Can only be bound to one scope variable at a time. If a second is attempted,\n         * the promise will be rejected with an error.\n         *\n         * @param {object} scope\n         * @param {string} varName\n         * @returns a promise which resolves to an unbind method after data is set in scope\n         */\n        $bindTo: function (scope, varName) {\n          var self = this;\n          return self.$loaded().then(function () {\n            return self.$$conf.binding.bindTo(scope, varName);\n          });\n        },\n\n        /**\n         * Listeners passed into this method are notified whenever a new change is received\n         * from the server. Each invocation is sent an object containing\n         * <code>{ type: 'value', key: 'my_firebase_id' }</code>\n         *\n         * This method returns an unbind function that can be used to detach the listener.\n         *\n         * @param {Function} cb\n         * @param {Object} [context]\n         * @returns {Function} invoke to stop observing events\n         */\n        $watch: function (cb, context) {\n          var list = this.$$conf.listeners;\n          list.push([cb, context]);\n          // an off function for cancelling the listener\n          return function () {\n            var i = list.findIndex(function (parts) {\n              return parts[0] === cb && parts[1] === context;\n            });\n            if (i > -1) {\n              list.splice(i, 1);\n            }\n          };\n        },\n\n        /**\n         * Informs $firebase to stop sending events and clears memory being used\n         * by this object (delete's its local content).\n         */\n        $destroy: function(err) {\n          var self = this;\n          if (!self.$isDestroyed) {\n            self.$isDestroyed = true;\n            self.$$conf.sync.destroy(err);\n            self.$$conf.binding.destroy();\n            $firebaseUtils.each(self, function (v, k) {\n              delete self[k];\n            });\n          }\n        },\n\n        /**\n         * Called by $firebase whenever an item is changed at the server.\n         * This method must exist on any objectFactory passed into $firebase.\n         *\n         * It should return true if any changes were made, otherwise `$$notify` will\n         * not be invoked.\n         *\n         * @param {object} snap a Firebase snapshot\n         * @return {boolean} true if any changes were made.\n         */\n        $$updated: function (snap) {\n          // applies new data to this object\n          var changed = $firebaseUtils.updateRec(this, snap);\n          // applies any defaults set using $$defaults\n          $firebaseUtils.applyDefaults(this, this.$$defaults);\n          // returning true here causes $$notify to be triggered\n          return changed;\n        },\n\n        /**\n         * Called whenever a security error or other problem causes the listeners to become\n         * invalid. This is generally an unrecoverable error.\n         * @param {Object} err which will have a `code` property and possibly a `message`\n         */\n        $$error: function (err) {\n          // prints an error to the console (via Angular's logger)\n          $log.error(err);\n          // frees memory and cancels any remaining listeners\n          this.$destroy(err);\n        },\n\n        /**\n         * Called internally by $bindTo when data is changed in $scope.\n         * Should apply updates to this record but should not call\n         * notify().\n         */\n        $$scopeUpdated: function(newData) {\n          // we use a one-directional loop to avoid feedback with 3-way bindings\n          // since set() is applied locally anyway, this is still performant\n          var def = $firebaseUtils.defer();\n          this.$ref().set($firebaseUtils.toJSON(newData), $firebaseUtils.makeNodeResolver(def));\n          return def.promise;\n        },\n\n        /**\n         * Updates any bound scope variables and\n         * notifies listeners registered with $watch\n         */\n        $$notify: function() {\n          var self = this, list = this.$$conf.listeners.slice();\n          // be sure to do this after setting up data and init state\n          angular.forEach(list, function (parts) {\n            parts[0].call(parts[1], {event: 'value', key: self.$id});\n          });\n        },\n\n        /**\n         * Overrides how Angular.forEach iterates records on this object so that only\n         * fields stored in Firebase are part of the iteration. To include meta fields like\n         * $id and $priority in the iteration, utilize for(key in obj) instead.\n         */\n        forEach: function(iterator, context) {\n          return $firebaseUtils.each(this, iterator, context);\n        }\n      };\n\n      /**\n       * This method allows FirebaseObject to be copied into a new factory. Methods passed into this\n       * function will be added onto the object's prototype. They can override existing methods as\n       * well.\n       *\n       * In addition to passing additional methods, it is also possible to pass in a class function.\n       * The prototype on that class function will be preserved, and it will inherit from\n       * FirebaseObject. It's also possible to do both, passing a class to inherit and additional\n       * methods to add onto the prototype.\n       *\n       * Once a factory is obtained by this method, it can be passed into $firebase as the\n       * `objectFactory` parameter:\n       *\n       * <pre><code>\n       * var MyFactory = $firebaseObject.$extend({\n       *    // add a method onto the prototype that prints a greeting\n       *    getGreeting: function() {\n       *       return 'Hello ' + this.first_name + ' ' + this.last_name + '!';\n       *    }\n       * });\n       *\n       * // use our new factory in place of $firebaseObject\n       * var obj = $firebase(ref, {objectFactory: MyFactory}).$asObject();\n       * </code></pre>\n       *\n       * @param {Function} [ChildClass] a child class which should inherit FirebaseObject\n       * @param {Object} [methods] a list of functions to add onto the prototype\n       * @returns {Function} a new factory suitable for use with $firebase\n       */\n      FirebaseObject.$extend = function(ChildClass, methods) {\n        if( arguments.length === 1 && angular.isObject(ChildClass) ) {\n          methods = ChildClass;\n          ChildClass = function(ref) {\n            if( !(this instanceof ChildClass) ) {\n              return new ChildClass(ref);\n            }\n            FirebaseObject.apply(this, arguments);\n          };\n        }\n        return $firebaseUtils.inherit(ChildClass, FirebaseObject, methods);\n      };\n\n      /**\n       * Creates a three-way data binding on a scope variable.\n       *\n       * @param {FirebaseObject} rec\n       * @returns {*}\n       * @constructor\n       */\n      function ThreeWayBinding(rec) {\n        this.subs = [];\n        this.scope = null;\n        this.key = null;\n        this.rec = rec;\n      }\n\n      ThreeWayBinding.prototype = {\n        assertNotBound: function(varName) {\n          if( this.scope ) {\n            var msg = 'Cannot bind to ' + varName + ' because this instance is already bound to ' +\n              this.key + '; one binding per instance ' +\n              '(call unbind method or create another FirebaseObject instance)';\n            $log.error(msg);\n            return $firebaseUtils.reject(msg);\n          }\n        },\n\n        bindTo: function(scope, varName) {\n          function _bind(self) {\n            var sending = false;\n            var parsed = $parse(varName);\n            var rec = self.rec;\n            self.scope = scope;\n            self.varName = varName;\n\n            function equals(scopeValue) {\n              return angular.equals(scopeValue, rec) &&\n                scopeValue.$priority === rec.$priority &&\n                scopeValue.$value === rec.$value;\n            }\n\n            function setScope(rec) {\n              parsed.assign(scope, $firebaseUtils.scopeData(rec));\n            }\n\n            var send = $firebaseUtils.debounce(function(val) {\n              var scopeData = $firebaseUtils.scopeData(val);\n              rec.$$scopeUpdated(scopeData)\n                ['finally'](function() {\n                  sending = false;\n                  if(!scopeData.hasOwnProperty('$value')){\n                    delete rec.$value;\n                    delete parsed(scope).$value;\n                  }\n                }\n              );\n            }, 50, 500);\n\n            var scopeUpdated = function(newVal) {\n              newVal = newVal[0];\n              if( !equals(newVal) ) {\n                sending = true;\n                send(newVal);\n              }\n            };\n\n            var recUpdated = function() {\n              if( !sending && !equals(parsed(scope)) ) {\n                setScope(rec);\n              }\n            };\n\n            // $watch will not check any vars prefixed with $, so we\n            // manually check $priority and $value using this method\n            function watchExp(){\n              var obj = parsed(scope);\n              return [obj, obj.$priority, obj.$value];\n            }\n\n            setScope(rec);\n            self.subs.push(scope.$on('$destroy', self.unbind.bind(self)));\n\n            // monitor scope for any changes\n            self.subs.push(scope.$watch(watchExp, scopeUpdated, true));\n\n            // monitor the object for changes\n            self.subs.push(rec.$watch(recUpdated));\n\n            return self.unbind.bind(self);\n          }\n\n          return this.assertNotBound(varName) || _bind(this);\n        },\n\n        unbind: function() {\n          if( this.scope ) {\n            angular.forEach(this.subs, function(unbind) {\n              unbind();\n            });\n            this.subs = [];\n            this.scope = null;\n            this.key = null;\n          }\n        },\n\n        destroy: function() {\n          this.unbind();\n          this.rec = null;\n        }\n      };\n\n      function ObjectSyncManager(firebaseObject, ref) {\n        function destroy(err) {\n          if( !sync.isDestroyed ) {\n            sync.isDestroyed = true;\n            ref.off('value', applyUpdate);\n            firebaseObject = null;\n            initComplete(err||'destroyed');\n          }\n        }\n\n        function init() {\n          ref.on('value', applyUpdate, error);\n          ref.once('value', function(snap) {\n            if (angular.isArray(snap.val())) {\n              $log.warn('Storing data using array indices in Firebase can result in unexpected behavior. See https://www.firebase.com/docs/web/guide/understanding-data.html#section-arrays-in-firebase for more information. Also note that you probably wanted $firebaseArray and not $firebaseObject.');\n            }\n\n            initComplete(null);\n          }, initComplete);\n        }\n\n        // call initComplete(); do not call this directly\n        function _initComplete(err) {\n          if( !isResolved ) {\n            isResolved = true;\n            if( err ) { def.reject(err); }\n            else { def.resolve(firebaseObject); }\n          }\n        }\n\n        var isResolved = false;\n        var def = $firebaseUtils.defer();\n        var applyUpdate = $firebaseUtils.batch(function(snap) {\n          var changed = firebaseObject.$$updated(snap);\n          if( changed ) {\n            // notifies $watch listeners and\n            // updates $scope if bound to a variable\n            firebaseObject.$$notify();\n          }\n        });\n        var error = $firebaseUtils.batch(function(err) {\n          _initComplete(err);\n          if( firebaseObject ) {\n            firebaseObject.$$error(err);\n          }\n        });\n        var initComplete = $firebaseUtils.batch(_initComplete);\n\n        var sync = {\n          isDestroyed: false,\n          destroy: destroy,\n          init: init,\n          ready: function() { return def.promise; }\n        };\n        return sync;\n      }\n\n      return FirebaseObject;\n    }\n  ]);\n\n  /** @deprecated */\n  angular.module('firebase').factory('$FirebaseObject', ['$log', '$firebaseObject',\n    function($log, $firebaseObject) {\n      return function() {\n        $log.warn('$FirebaseObject has been renamed. Use $firebaseObject instead.');\n        return $firebaseObject.apply(null, arguments);\n      };\n    }\n  ]);\n})();\n\n(function() {\n  'use strict';\n\n  angular.module(\"firebase\")\n\n    /** @deprecated */\n    .factory(\"$firebase\", function() {\n      return function() {\n        throw new Error('$firebase has been removed. You may instantiate $firebaseArray and $firebaseObject ' +\n        'directly now. For simple write operations, just use the Firebase ref directly. ' +\n        'See the AngularFire 1.0.0 changelog for details: https://www.firebase.com/docs/web/libraries/angular/changelog.html');\n      };\n    });\n\n})();\n\n'use strict';\n\n// Shim Array.indexOf for IE compatibility.\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function (searchElement, fromIndex) {\n    if (this === undefined || this === null) {\n      throw new TypeError(\"'this' is null or not defined\");\n    }\n    // Hack to convert object.length to a UInt32\n    // jshint -W016\n    var length = this.length >>> 0;\n    fromIndex = +fromIndex || 0;\n    // jshint +W016\n\n    if (Math.abs(fromIndex) === Infinity) {\n      fromIndex = 0;\n    }\n\n    if (fromIndex < 0) {\n      fromIndex += length;\n      if (fromIndex < 0) {\n        fromIndex = 0;\n      }\n    }\n\n    for (;fromIndex < length; fromIndex++) {\n      if (this[fromIndex] === searchElement) {\n        return fromIndex;\n      }\n    }\n\n    return -1;\n  };\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1),\n      fToBind = this,\n      fNOP = function () {},\n      fBound = function () {\n        return fToBind.apply(this instanceof fNOP && oThis\n            ? this\n            : oThis,\n          aArgs.concat(Array.prototype.slice.call(arguments)));\n      };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\nif (!Array.prototype.findIndex) {\n  Object.defineProperty(Array.prototype, 'findIndex', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function(predicate) {\n      if (this == null) {\n        throw new TypeError('Array.prototype.find called on null or undefined');\n      }\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n      var list = Object(this);\n      var length = list.length >>> 0;\n      var thisArg = arguments[1];\n      var value;\n\n      for (var i = 0; i < length; i++) {\n        if (i in list) {\n          value = list[i];\n          if (predicate.call(thisArg, value, i, list)) {\n            return i;\n          }\n        }\n      }\n      return -1;\n    }\n  });\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\nif (typeof Object.create != 'function') {\n  (function () {\n    var F = function () {};\n    Object.create = function (o) {\n      if (arguments.length > 1) {\n        throw new Error('Second argument not supported');\n      }\n      if (o === null) {\n        throw new Error('Cannot set a null [[Prototype]]');\n      }\n      if (typeof o != 'object') {\n        throw new TypeError('Argument must be an object');\n      }\n      F.prototype = o;\n      return new F();\n    };\n  })();\n}\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\nif (!Object.keys) {\n  Object.keys = (function () {\n    'use strict';\n    var hasOwnProperty = Object.prototype.hasOwnProperty,\n      hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),\n      dontEnums = [\n        'toString',\n        'toLocaleString',\n        'valueOf',\n        'hasOwnProperty',\n        'isPrototypeOf',\n        'propertyIsEnumerable',\n        'constructor'\n      ],\n      dontEnumsLength = dontEnums.length;\n\n    return function (obj) {\n      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n        throw new TypeError('Object.keys called on non-object');\n      }\n\n      var result = [], prop, i;\n\n      for (prop in obj) {\n        if (hasOwnProperty.call(obj, prop)) {\n          result.push(prop);\n        }\n      }\n\n      if (hasDontEnumBug) {\n        for (i = 0; i < dontEnumsLength; i++) {\n          if (hasOwnProperty.call(obj, dontEnums[i])) {\n            result.push(dontEnums[i]);\n          }\n        }\n      }\n      return result;\n    };\n  }());\n}\n\n// http://ejohn.org/blog/objectgetprototypeof/\nif ( typeof Object.getPrototypeOf !== \"function\" ) {\n  if ( typeof \"test\".__proto__ === \"object\" ) {\n    Object.getPrototypeOf = function(object){\n      return object.__proto__;\n    };\n  } else {\n    Object.getPrototypeOf = function(object){\n      // May break if the constructor has been tampered with\n      return object.constructor.prototype;\n    };\n  }\n}\n\n(function() {\n  'use strict';\n\n  angular.module('firebase')\n    .factory('$firebaseConfig', [\"$firebaseArray\", \"$firebaseObject\", \"$injector\",\n      function($firebaseArray, $firebaseObject, $injector) {\n        return function(configOpts) {\n          // make a copy we can modify\n          var opts = angular.extend({}, configOpts);\n          // look up factories if passed as string names\n          if( typeof opts.objectFactory === 'string' ) {\n            opts.objectFactory = $injector.get(opts.objectFactory);\n          }\n          if( typeof opts.arrayFactory === 'string' ) {\n            opts.arrayFactory = $injector.get(opts.arrayFactory);\n          }\n          // extend defaults and return\n          return angular.extend({\n            arrayFactory: $firebaseArray,\n            objectFactory: $firebaseObject\n          }, opts);\n        };\n      }\n    ])\n\n    .factory('$firebaseUtils', [\"$q\", \"$timeout\", \"$rootScope\",\n      function($q, $timeout, $rootScope) {\n\n        // ES6 style promises polyfill for angular 1.2.x\n        // Copied from angular 1.3.x implementation: https://github.com/angular/angular.js/blob/v1.3.5/src/ng/q.js#L539\n        function Q(resolver) {\n          if (!angular.isFunction(resolver)) {\n            throw new Error('missing resolver function');\n          }\n\n          var deferred = $q.defer();\n\n          function resolveFn(value) {\n            deferred.resolve(value);\n          }\n\n          function rejectFn(reason) {\n            deferred.reject(reason);\n          }\n\n          resolver(resolveFn, rejectFn);\n\n          return deferred.promise;\n        }\n\n        var utils = {\n          /**\n           * Returns a function which, each time it is invoked, will gather up the values until\n           * the next \"tick\" in the Angular compiler process. Then they are all run at the same\n           * time to avoid multiple cycles of the digest loop. Internally, this is done using $evalAsync()\n           *\n           * @param {Function} action\n           * @param {Object} [context]\n           * @returns {Function}\n           */\n          batch: function(action, context) {\n            return function() {\n              var args = Array.prototype.slice.call(arguments, 0);\n              utils.compile(function() {\n                action.apply(context, args);\n              });\n            };\n          },\n\n          /**\n           * A rudimentary debounce method\n           * @param {function} fn the function to debounce\n           * @param {object} [ctx] the `this` context to set in fn\n           * @param {int} wait number of milliseconds to pause before sending out after each invocation\n           * @param {int} [maxWait] max milliseconds to wait before sending out, defaults to wait * 10 or 100\n           */\n          debounce: function(fn, ctx, wait, maxWait) {\n            var start, cancelTimer, args, runScheduledForNextTick;\n            if( typeof(ctx) === 'number' ) {\n              maxWait = wait;\n              wait = ctx;\n              ctx = null;\n            }\n\n            if( typeof wait !== 'number' ) {\n              throw new Error('Must provide a valid integer for wait. Try 0 for a default');\n            }\n            if( typeof(fn) !== 'function' ) {\n              throw new Error('Must provide a valid function to debounce');\n            }\n            if( !maxWait ) { maxWait = wait*10 || 100; }\n\n            // clears the current wait timer and creates a new one\n            // however, if maxWait is exceeded, calls runNow() on the next tick.\n            function resetTimer() {\n              if( cancelTimer ) {\n                cancelTimer();\n                cancelTimer = null;\n              }\n              if( start && Date.now() - start > maxWait ) {\n                if(!runScheduledForNextTick){\n                  runScheduledForNextTick = true;\n                  utils.compile(runNow);\n                }\n              }\n              else {\n                if( !start ) { start = Date.now(); }\n                cancelTimer = utils.wait(runNow, wait);\n              }\n            }\n\n            // Clears the queue and invokes the debounced function with the most recent arguments\n            function runNow() {\n              cancelTimer = null;\n              start = null;\n              runScheduledForNextTick = false;\n              fn.apply(ctx, args);\n            }\n\n            function debounced() {\n              args = Array.prototype.slice.call(arguments, 0);\n              resetTimer();\n            }\n            debounced.running = function() {\n              return start > 0;\n            };\n\n            return debounced;\n          },\n\n          assertValidRef: function(ref, msg) {\n            if( !angular.isObject(ref) ||\n              typeof(ref.ref) !== 'function' ||\n              typeof(ref.ref().transaction) !== 'function' ) {\n              throw new Error(msg || 'Invalid Firebase reference');\n            }\n          },\n\n          // http://stackoverflow.com/questions/7509831/alternative-for-the-deprecated-proto\n          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n          inherit: function(ChildClass, ParentClass, methods) {\n            var childMethods = ChildClass.prototype;\n            ChildClass.prototype = Object.create(ParentClass.prototype);\n            ChildClass.prototype.constructor = ChildClass; // restoring proper constructor for child class\n            angular.forEach(Object.keys(childMethods), function(k) {\n              ChildClass.prototype[k] = childMethods[k];\n            });\n            if( angular.isObject(methods) ) {\n              angular.extend(ChildClass.prototype, methods);\n            }\n            return ChildClass;\n          },\n\n          getPrototypeMethods: function(inst, iterator, context) {\n            var methods = {};\n            var objProto = Object.getPrototypeOf({});\n            var proto = angular.isFunction(inst) && angular.isObject(inst.prototype)?\n              inst.prototype : Object.getPrototypeOf(inst);\n            while(proto && proto !== objProto) {\n              for (var key in proto) {\n                // we only invoke each key once; if a super is overridden it's skipped here\n                if (proto.hasOwnProperty(key) && !methods.hasOwnProperty(key)) {\n                  methods[key] = true;\n                  iterator.call(context, proto[key], key, proto);\n                }\n              }\n              proto = Object.getPrototypeOf(proto);\n            }\n          },\n\n          getPublicMethods: function(inst, iterator, context) {\n            utils.getPrototypeMethods(inst, function(m, k) {\n              if( typeof(m) === 'function' && k.charAt(0) !== '_' ) {\n                iterator.call(context, m, k);\n              }\n            });\n          },\n\n          defer: $q.defer,\n\n          reject: $q.reject,\n\n          resolve: $q.when,\n\n          //TODO: Remove false branch and use only angular implementation when we drop angular 1.2.x support.\n          promise: angular.isFunction($q) ? $q : Q,\n\n          makeNodeResolver:function(deferred){\n            return function(err,result){\n              if(err === null){\n                if(arguments.length > 2){\n                  result = Array.prototype.slice.call(arguments,1);\n                }\n                deferred.resolve(result);\n              }\n              else {\n                deferred.reject(err);\n              }\n            };\n          },\n\n          wait: function(fn, wait) {\n            var to = $timeout(fn, wait||0);\n            return function() {\n              if( to ) {\n                $timeout.cancel(to);\n                to = null;\n              }\n            };\n          },\n\n          compile: function(fn) {\n            return $rootScope.$evalAsync(fn||function() {});\n          },\n\n          deepCopy: function(obj) {\n            if( !angular.isObject(obj) ) { return obj; }\n            var newCopy = angular.isArray(obj) ? obj.slice() : angular.extend({}, obj);\n            for (var key in newCopy) {\n              if (newCopy.hasOwnProperty(key)) {\n                if (angular.isObject(newCopy[key])) {\n                  newCopy[key] = utils.deepCopy(newCopy[key]);\n                }\n              }\n            }\n            return newCopy;\n          },\n\n          trimKeys: function(dest, source) {\n            utils.each(dest, function(v,k) {\n              if( !source.hasOwnProperty(k) ) {\n                delete dest[k];\n              }\n            });\n          },\n\n          scopeData: function(dataOrRec) {\n            var data = {\n              $id: dataOrRec.$id,\n              $priority: dataOrRec.$priority\n            };\n            var hasPublicProp = false;\n            utils.each(dataOrRec, function(v,k) {\n              hasPublicProp = true;\n              data[k] = utils.deepCopy(v);\n            });\n            if(!hasPublicProp && dataOrRec.hasOwnProperty('$value')){\n              data.$value = dataOrRec.$value;\n            }\n            return data;\n          },\n\n          updateRec: function(rec, snap) {\n            var data = snap.val();\n            var oldData = angular.extend({}, rec);\n\n            // deal with primitives\n            if( !angular.isObject(data) ) {\n              rec.$value = data;\n              data = {};\n            }\n            else {\n              delete rec.$value;\n            }\n\n            // apply changes: remove old keys, insert new data, set priority\n            utils.trimKeys(rec, data);\n            angular.extend(rec, data);\n            rec.$priority = snap.getPriority();\n\n            return !angular.equals(oldData, rec) ||\n              oldData.$value !== rec.$value ||\n              oldData.$priority !== rec.$priority;\n          },\n\n          applyDefaults: function(rec, defaults) {\n            if( angular.isObject(defaults) ) {\n              angular.forEach(defaults, function(v,k) {\n                if( !rec.hasOwnProperty(k) ) {\n                  rec[k] = v;\n                }\n              });\n            }\n            return rec;\n          },\n\n          dataKeys: function(obj) {\n            var out = [];\n            utils.each(obj, function(v,k) {\n              out.push(k);\n            });\n            return out;\n          },\n\n          each: function(obj, iterator, context) {\n            if(angular.isObject(obj)) {\n              for (var k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                  var c = k.charAt(0);\n                  if( c !== '_' && c !== '$' && c !== '.' ) {\n                    iterator.call(context, obj[k], k, obj);\n                  }\n                }\n              }\n            }\n            else if(angular.isArray(obj)) {\n              for(var i = 0, len = obj.length; i < len; i++) {\n                iterator.call(context, obj[i], i, obj);\n              }\n            }\n            return obj;\n          },\n\n          /**\n           * A utility for retrieving a Firebase reference or DataSnapshot's\n           * key name. This is backwards-compatible with `name()` from Firebase\n           * 1.x.x and `key()` from Firebase 2.0.0+. Once support for Firebase\n           * 1.x.x is dropped in AngularFire, this helper can be removed.\n           */\n          getKey: function(refOrSnapshot) {\n            return (typeof refOrSnapshot.key === 'function') ? refOrSnapshot.key() : refOrSnapshot.name();\n          },\n\n          /**\n           * A utility for converting records to JSON objects\n           * which we can save into Firebase. It asserts valid\n           * keys and strips off any items prefixed with $.\n           *\n           * If the rec passed into this method has a toJSON()\n           * method, that will be used in place of the custom\n           * functionality here.\n           *\n           * @param rec\n           * @returns {*}\n           */\n          toJSON: function(rec) {\n            var dat;\n            if( !angular.isObject(rec) ) {\n              rec = {$value: rec};\n            }\n            if (angular.isFunction(rec.toJSON)) {\n              dat = rec.toJSON();\n            }\n            else {\n              dat = {};\n              utils.each(rec, function (v, k) {\n                dat[k] = stripDollarPrefixedKeys(v);\n              });\n            }\n            if( angular.isDefined(rec.$value) && Object.keys(dat).length === 0 && rec.$value !== null ) {\n              dat['.value'] = rec.$value;\n            }\n            if( angular.isDefined(rec.$priority) && Object.keys(dat).length > 0 && rec.$priority !== null ) {\n              dat['.priority'] = rec.$priority;\n            }\n            angular.forEach(dat, function(v,k) {\n              if (k.match(/[.$\\[\\]#\\/]/) && k !== '.value' && k !== '.priority' ) {\n                throw new Error('Invalid key ' + k + ' (cannot contain .$[]#)');\n              }\n              else if( angular.isUndefined(v) ) {\n                throw new Error('Key '+k+' was undefined. Cannot pass undefined in JSON. Use null instead.');\n              }\n            });\n            return dat;\n          },\n\n          doSet: function(ref, data) {\n            var def = utils.defer();\n            if( angular.isFunction(ref.set) || !angular.isObject(data) ) {\n              // this is not a query, just do a flat set\n              ref.set(data, utils.makeNodeResolver(def));\n            }\n            else {\n              var dataCopy = angular.extend({}, data);\n              // this is a query, so we will replace all the elements\n              // of this query with the value provided, but not blow away\n              // the entire Firebase path\n              ref.once('value', function(snap) {\n                snap.forEach(function(ss) {\n                  if( !dataCopy.hasOwnProperty(utils.getKey(ss)) ) {\n                    dataCopy[utils.getKey(ss)] = null;\n                  }\n                });\n                ref.ref().update(dataCopy, utils.makeNodeResolver(def));\n              }, function(err) {\n                def.reject(err);\n              });\n            }\n            return def.promise;\n          },\n\n          doRemove: function(ref) {\n            var def = utils.defer();\n            if( angular.isFunction(ref.remove) ) {\n              // ref is not a query, just do a flat remove\n              ref.remove(utils.makeNodeResolver(def));\n            }\n            else {\n              // ref is a query so let's only remove the\n              // items in the query and not the entire path\n              ref.once('value', function(snap) {\n                var promises = [];\n                snap.forEach(function(ss) {\n                  var d = utils.defer();\n                  promises.push(d.promise);\n                  ss.ref().remove(utils.makeNodeResolver(def));\n                });\n                utils.allPromises(promises)\n                  .then(function() {\n                    def.resolve(ref);\n                  },\n                  function(err){\n                    def.reject(err);\n                  }\n                );\n              }, function(err) {\n                def.reject(err);\n              });\n            }\n            return def.promise;\n          },\n\n          /**\n           * AngularFire version number.\n           */\n          VERSION: '1.1.3',\n\n          allPromises: $q.all.bind($q)\n        };\n\n        return utils;\n      }\n    ]);\n\n    function stripDollarPrefixedKeys(data) {\n      if( !angular.isObject(data) ) { return data; }\n      var out = angular.isArray(data)? [] : {};\n      angular.forEach(data, function(v,k) {\n        if(typeof k !== 'string' || k.charAt(0) !== '$') {\n          out[k] = stripDollarPrefixedKeys(v);\n        }\n      });\n      return out;\n    }\n})();\n"]}