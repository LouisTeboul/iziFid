"use strict";

angular.module('APIServiceApp')
    .directive('iziAccount', function () {
        return {
            restrict: "EA",
            replace: true,
            transclude: true,
            scope: {
                barcode: "@",
                clientUrl: "@",
                theme: "@",
                remoteCss: "@",
                otherModelValue: "=compareTo",
                auto: "="
            },

            templateUrl: 'scripts/directives/views/account.html',
            link: function (scope) {
                if (scope.theme === 'light') {
                    angular.element('.izi-account').addClass('izi-light-theme');
                }
            },
            controller: [
                '$scope', '$rootScope', '$element', '$attrs', '$http', '$window', '$timeout', '$log', '$mdDialog', 'APIService',
                function ($scope, $rootScope, $element, $attrs, $http, $window, $timeout, $log, $mdDialog, APIService) {

                    /** Initial setup */
                    APIService.set.clientUrl($scope.clientUrl);

                    /**  */
                    $scope.form = {};
                    $scope.QRCodeValid = true;
                    $scope.client = {};
                    var balanceInUse;

                    $attrs.$observe('barcode', function (passedBarcode) {
                        console.log(passedBarcode);
                        checkBarcode(passedBarcode);
                        $scope.barcodeValid ? displayData() : 0;
                    });

//                    $($('script[type="text/ng-template"]').html()).appendTo('body'); // jshint ignore:line

                    /** Get css content and inject it into the <head> tag of the page this directive is included in */
                    var cssUrl = $scope.remoteCss ? $scope.remoteCss : 'http://localhost:8001/remotecss.css';
                    $http.get(cssUrl).success(function (data) {
                        angular.element(document).find('head').append("<style type='text/css'>" + data + "</style>");
                        angular.element('#izi-style').remove();
                    }).error(function () {
                        angular.element(document).find('head').append("<style type='text/css'>" + angular.element('#izi-style').html() + "</style>");
                        angular.element('#izi-style').remove();
                    });

                    $scope.customStyle ? angular.element(document).find('head').prepend("<style type='text/css'>" + $scope.customStyle + "</style>") : 0;

                    /** If the barcode to check is valid we assign it to $scope.barcode, otherwise we delete $scope.barcode altogether */
                    function checkBarcode(barcode) {
                        ($scope.barcodeValid = !!(barcode && APIService.validate.barcode(barcode))) ? $scope.barcode = barcode : delete $scope.barcode;
                    }

                    /** If the barcode parameter is defined, check if it is a valid barcode */
                    function displayData() {
                        /** We use empty data to create the impression that request loaded instantly while we wait for the actual data to come through */
                        $scope.data = APIService.get.emptyData();
                        $scope.data.Offers = [];

                        APIService.get.loyaltyObject($scope.barcode, function (data) {
                            $scope.data = data;
                            $scope.data.Offers = APIService.get.formattedOffers(data);
                            $log.info(data);
                            $scope.hideData = false;
                        });
                    }

                    $scope.getDate = function (date) {
                        return new Date(date);
                    };

                    /** Disconnect function */
                    $scope.disconnect = function () {
                        $window.confirm("Êtes-vous sûr de vouloir vous déconnecter ?") ? delete $scope.barcode : 0;
                    };

                    $scope.goRegister = function () {
                        $scope.register = true;
                    };

                    $scope.backToLogin = function () {
                        $scope.register = false;
                    };

                    $scope.login = function () {
                        checkBarcode($scope.form.barcode);
                        $scope.barcodeValid ? displayData() : $window.alert("Ce n° de carte n'est pas valide !");
                    };

                    $scope.autoLogin = function () {
                        if ($scope.auto) {
                            checkBarcode($scope.form.barcode);
                            $scope.barcodeValid ? displayData() : $window.alert("Ce n° de carte n'est pas valide !");
                        }
                    };

                    $rootScope.useBalanceToPay = function (val) {
                        var passageObj = APIService.get.emptyPassageObj();

                        passageObj.BalanceUpdate = {
                            "Id": balanceInUse.Id,
                            "UpdateValue": -parseFloat(val)
                        };

                        $log.info('adding Passage...', JSON.stringify(passageObj));
                        APIService.actions.addPassage(passageObj).success(function (data) {
                            $mdDialog.hide();
                            $log.info(data);
                            return true;
                        });
                    };

                    $scope.useOffer = function (offer) {
                        var passageObj = APIService.get.emptyPassageObj();

                        passageObj.Offer = {
                            "OfferObjectId": offer.OfferObjectId,
                            "Barcode": offer.Barcode || '',
                            "Date": new Date()
                        };

                        $log.info('using offer...', JSON.stringify(passageObj));
                        APIService.actions.addPassage(passageObj).success(function (data) {
                            $mdDialog.hide();
                            $log.info(data);
                            return true;
                        });
                    };

                    $scope.submitRegister = function () {
                        var obj = {
                            Barcode: $scope.client.barcode,
                            FirstName: $scope.client.firstname,
                            LastName: $scope.client.lastname,
                            Email: $scope.client.email,
                            Phone: $scope.client.tel,
                            StreetAddress: $scope.client.address,
                            ZipPostalCode: $scope.client.zipcode,
                            City: $scope.client.city,
                            Password: $scope.client.password,
                            ConfirmPassword: $scope.client.passwordConfirm
                        };

                        APIService.actions.register(obj).then(function () {
                            $scope.barcode = $scope.client.barcode;
                            $scope.register = false;
                            displayData();
                        });
                    };

                    $scope.showConfirm = function (ev, offer) {
                        var confirm = $mdDialog.confirm()
                            .title('Voulez-vous utiliser cette offre ?')
                            .content(offer.OfferObjectDescription)
                            .ariaLabel('Utiliser Offre')
                            .ok('VALIDER')
                            .cancel('ANNULER')
                            .targetEvent(ev);

                        $mdDialog.show(confirm).then(function () {
                            $scope.useOffer(offer);
                        }, function () {
                            // annulé
                        });
                    };

                    $scope.showAdvanced = function (ev, balance) {
                        if (balance.UseToPay === true) {
                            balanceInUse = balance;

                            $mdDialog.show({
                                clickOutsideToClose: true,
                                targetEvent: ev,
                                controller: 'DialogCtrl',
                                template: '<md-dialog aria-label="Paiement En Avoir"> \
                                <md-dialog-content class="sticky-container clearfix"> \
                                    <md-subheader class="md-sticky-no-effect">PAIEMENT EN AVOIR</md-subheader> \
                                    <div> \
                                        <form action="" name="balancePaymentForm" novalidate>\
                                            <md-input-container> \
                                                <label>Montant</label> \
                                                <input ng-minlength="1" ng-pattern="/^[0-9.,]+$/" ng-model="balancePayment.value" required> \
                                            </md-input-container> \
                                        </form> \
                                    </div> \
                                    </md-dialog-content> \
                                    <div class="md-actions" layout="row"> \
                                        <md-button class="md-primary" ng-disabled="balancePaymentForm.$invalid || balancePaymentForm.$pristine" ng-click="useBalanceToPay(balancePayment.value)"> \
                                        VALIDER \
                                        </md-button> \
                                        <md-button class="md-primary" ng-click="cancel()"> \
                                        ANNULER \
                                        </md-button> \
                                    </div> \
                                </md-dialog>'

                            }).then(function () {

                            }, function () {

                            });
                        } else {
                            return false;
                        }
                    };


                    /** Check barcode */
                    checkBarcode($scope.barcode);

                    /** If the barcode defined in the parameters is valid,*/
                    $scope.barcodeValid ? displayData() : $scope.hideData = true;
                }
            ]
        };
    })

/** ngEnter directive for handling enter keypress on inputs (from: http://eric.sau.pe/angularjs-detect-enter-key-ngenter/) */
    .directive('ngEnter', function () {
        return function (scope, element, attrs) {
            element.bind("keydown keypress", function (event) {
                if (event.which === 13) {
                    scope.$apply(function () {
                        scope.$eval(attrs.ngEnter);
                    });
                    event.preventDefault();
                }
            });
        };
    })

    .controller('DialogCtrl', ['$scope', '$rootScope', '$mdDialog', function ($scope, $rootScope, $mdDialog) {
        $scope.hide = function () {
            $mdDialog.hide();
            $('md-backdrop, .md-dialog-container').remove();
        };

        $scope.cancel = function () {
            $mdDialog.cancel();
            $('md-backdrop, .md-dialog-container').remove();
        };

        $scope.useBalanceToPay = function (val) {
            $rootScope.useBalanceToPay(val);
            $scope.hide();
        };
    }])

/** compareTo directive for validating that an input value is equal to another **/
    .directive('compareTo', function () {
        return {
            require: "ngModel",
            scope: {
                otherModelValue: "=compareTo"
            },
            link: function (scope, element, attributes, ngModel) {

                ngModel.$validators.compareTo = function (modelValue) {
                    return modelValue === scope.otherModelValue;
                };

                scope.$watch("otherModelValue", function () {
                    ngModel.$validate();
                });
            }
        };
    }
);